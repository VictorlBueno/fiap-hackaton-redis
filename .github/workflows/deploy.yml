name: Deploy Infraestrutura Redis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/deploy.yml'

env:
  AWS_REGION: us-east-1
  BUCKET_NAME: fiap-hack-terraform-state
  PROJECT_NAME: fiap-hack
  ENVIRONMENT: production
  EKS_CLUSTER_NAME: fiap-hack-cluster

jobs:
  validar:
    name: Validar Terraform
    runs-on: ubuntu-latest
    
    steps:
      - name: Baixar código
        uses: actions/checkout@v4

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Inicializar Terraform (reconfigure)
        working-directory: terraform
        run: terraform init -reconfigure

      - name: Corrigir formatação
        working-directory: terraform
        run: terraform fmt -recursive

      - name: Validar Terraform
        working-directory: terraform
        run: terraform validate

  plano:
    name: Gerar Plano de Mudanças
    runs-on: ubuntu-latest
    needs: validar
    
    steps:
      - name: Baixar código
        uses: actions/checkout@v4

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Instalar kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configurar kubectl para EKS
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Inicializar Terraform (reconfigure)
        working-directory: terraform
        run: terraform init -reconfigure

      - name: Gerar plano
        working-directory: terraform
        run: terraform plan -out=redis.tfplan

      - name: Salvar plano
        uses: actions/upload-artifact@v4
        with:
          name: redis-tfplan
          path: terraform/redis.tfplan
          retention-days: 1

  deploy:
    name: Aplicar Mudanças na Infraestrutura
    runs-on: ubuntu-latest
    needs: [validar, plano]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Baixar código
        uses: actions/checkout@v4

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Instalar kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configurar kubectl para EKS
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Baixar plano
        uses: actions/download-artifact@v4
        with:
          name: redis-tfplan
          path: terraform/

      - name: Inicializar Terraform (reconfigure)
        working-directory: terraform
        run: terraform init -reconfigure

      - name: Aplicar mudanças
        working-directory: terraform
        run: terraform apply -auto-approve redis.tfplan

      - name: Aguardar deployment
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/redis -n redis

      - name: Verificar status do Redis
        run: |
          echo "=== Status do Redis ==="
          kubectl get pods -n redis
          kubectl get svc -n redis
          echo ""
          echo "Redis está rodando em:"
          kubectl get svc redis-service -n redis -o jsonpath='{.spec.clusterIP}'
          echo ":6379"

      - name: Testar conectividade
        run: |
          echo "Testando conectividade com Redis..."
          kubectl exec -n redis deployment/redis -- redis-cli -a ${{ secrets.REDIS_PASSWORD }} ping || echo "Teste de conectividade falhou"

  notificar:
    name: Notificar Status do Deploy
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Notificar sucesso
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Deploy do Redis concluído com sucesso!"

      - name: Notificar falha
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Falha no deploy do Redis!"
          exit 1 